-- Automatically generated by ForSyDe
library forsyde;
library ieee;
use forsyde.types.all;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library aluProc_lib;
use aluProc_lib.types.all;


entity \and4BitProc\ is
     port (\a\ : in fsvec_4_std_logic;
           \b\ : in fsvec_4_std_logic;
           \y\ : out fsvec_4_std_logic);
end entity \and4BitProc\;


architecture synthesizable of \and4BitProc\ is
     signal \and4_out\ : fsvec_4_std_logic;
begin
     \and4\ : block
          port (\and4_in1\ : in fsvec_4_std_logic;
                \and4_in2\ : in fsvec_4_std_logic;
                \and4_out\ : out fsvec_4_std_logic);
          port map (\and4_in1\ => \a\,
                    \and4_in2\ => \b\,
                    \and4_out\ => \and4_out\);
          function \and4BitFun\ (\a\ : fsvec_4_std_logic;
                                 \b\ : fsvec_4_std_logic)
                                return fsvec_4_std_logic is
          begin
               return plusgt(ex(\a\, 3) and ex(\b\, 3),
                             plusgt(ex(\a\, 2) and ex(\b\, 2),
                                    plusgt(ex(\a\, 1) and ex(\b\, 1),
                                           plusgt(ex(\a\, 0) and ex(\b\, 0),
                                                  empty))));
          end;
     begin
          \and4_out\ <= \and4BitFun\(\a\ => \a\, \b\ => \b\);
     end block \and4\;
     
     \y\ <= \and4_out\;
end architecture synthesizable;
