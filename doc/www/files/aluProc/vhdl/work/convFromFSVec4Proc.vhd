-- Automatically generated by ForSyDe
library forsyde;
library ieee;
use forsyde.types.all;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library aluProc_lib;
use aluProc_lib.types.all;


entity \convFromFSVec4Proc\ is
     port (\vector4\ : in fsvec_4_std_logic;
           \v3\ : out std_logic;
           \v2\ : out std_logic;
           \v1\ : out std_logic;
           \v0\ : out std_logic);
end entity \convFromFSVec4Proc\;


architecture synthesizable of \convFromFSVec4Proc\ is
     signal \conv4_out\ : tup_4_std_logic_std_logic_std_logic_std_logic;
     signal \unzip4_out1\ : std_logic;
     signal \unzip4_out2\ : std_logic;
     signal \unzip4_out3\ : std_logic;
     signal \unzip4_out4\ : std_logic;
begin
     \conv4\ : block
          port (\conv4_in1\ : in fsvec_4_std_logic;
                \conv4_out\ : out tup_4_std_logic_std_logic_std_logic_std_logic);
          port map (\conv4_in1\ => \vector4\,
                    \conv4_out\ => \conv4_out\);
          function \convFromFSVec4Fun\ (\v\ : fsvec_4_std_logic)
                                       return tup_4_std_logic_std_logic_std_logic_std_logic is
          begin
               return (ex(\v\, 3), ex(\v\, 2), ex(\v\, 1), ex(\v\, 0));
          end;
     begin
          \conv4_out\ <= \convFromFSVec4Fun\(\v\ => \vector4\);
     end block \conv4\;
     
     \unzip4\ : block
          port (\unzip4_in\ : in tup_4_std_logic_std_logic_std_logic_std_logic;
                \unzip4_out1\ : out std_logic;
                \unzip4_out2\ : out std_logic;
                \unzip4_out3\ : out std_logic;
                \unzip4_out4\ : out std_logic);
          port map (\unzip4_in\ => \conv4_out\,
                    \unzip4_out1\ => \unzip4_out1\,
                    \unzip4_out2\ => \unzip4_out2\,
                    \unzip4_out3\ => \unzip4_out3\,
                    \unzip4_out4\ => \unzip4_out4\);
     begin
          \unzip4_out1\ <= \unzip4_in\.tup_1;
          \unzip4_out2\ <= \unzip4_in\.tup_2;
          \unzip4_out3\ <= \unzip4_in\.tup_3;
          \unzip4_out4\ <= \unzip4_in\.tup_4;
     end block \unzip4\;
     
     \v3\ <= \unzip4_out1\;
     
     \v2\ <= \unzip4_out2\;
     
     \v1\ <= \unzip4_out3\;
     
     \v0\ <= \unzip4_out4\;
end architecture synthesizable;
