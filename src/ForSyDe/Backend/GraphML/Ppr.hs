-----------------------------------------------------------------------------
-- |
-- Module      :  ForSyDe.Backend.GraphML.Ppr
-- Copyright   :  (c) The ForSyDe Team 2007
-- License     :  BSD-style (see the file LICENSE)
-- 
-- Maintainer  :  ecs_forsyde_development@ict.kth.se
-- Stability   :  experimental
-- Portability :  non-portable (Template Haskell)
--
-- GraphML pretty printing instances.
--
-----------------------------------------------------------------------------

-- FIMXE: this module is ugly, need functions for printing tags to avoid
--        print < /> and ="" all the time
--        maybe reuse a XML pretty printer?
-- FIXME: it isn't ugly just because of that, the code should be refactored
--        and improved

module ForSyDe.Backend.GraphML.Ppr where

import ForSyDe.Backend.Ppr
import ForSyDe.Ids
import ForSyDe.Process.ProcVal
import ForSyDe.Process.ProcFun
import ForSyDe.Backend.GraphML.AST
import ForSyDe.Netlist
import ForSyDe.Netlist.Traverse
import ForSyDe.System.SysDef
import ForSyDe.OSharing


import Language.Haskell.TH (pprint, Dec(FunD), Exp)
import Text.PrettyPrint.HughesPJ


-- | Number of spaces used for indentation
nestVal :: Int
nestVal = 5


instance Ppr GraphMLGraph where
 ppr (GraphMLGraph id nodes edges) =
  text "<graph" <+> text ("id=\"" ++ id ++ "\"") <+> 
                     text "edgedefault=\"directed\" >" $+$
    nest nestVal (vSpace $+$    
                  ppr_list (vNSpaces 1) nodes $+$
                  vSpace $+$
                  ppr_list (vNSpaces 1) edges $+$
                  vSpace) $+$
  text "</graph>" 


instance Ppr GraphMLNode where
 ppr (ProcNode ins outs) =
   text "<node" <+> text ("id=\"" ++ id ++ "\"") <> text ">" $+$   
   nest nestVal (
       (case ins of
           InPort  _ -> 
             process_type "InPort"
           Proc _ (Const pval) -> 
             process_type "Const" $+$
             value_arg  ((expVal.valAST) pval)
           Proc _ (ZipWithNSY tpf _) -> 
             process_type "ZipWithNSY" $+$
             procfun_arg ((tpast.tast) tpf)
           Proc _ (ZipWithxSY tpf _) -> 
             process_type "ZipWithNSY" $+$
             procfun_arg ((tpast.tast) tpf)
           Proc _ (UnzipNSY _ _ _) -> 
             process_type "UnzipNSY" 
           Proc _ (UnzipxSY _ _ _ _) -> 
             process_type "UnzipxSY"
           Proc _ (DelaySY pval _) -> 
             process_type "DelaySY" $+$
             value_arg  ((expVal.valAST) pval)
           Proc _ (SysIns psd _) -> 
             process_type "SysIns" $+$
             instance_parent ((sid.readURef.unPrimSysDef) psd) )  $+$
       vcat (map port portIds)      
       ) $+$
   text "</node>" 
  where id = case ins of
               InPort id -> id
               Proc id _ -> id
        portIds = arguments ins ++ outs
 -- FIXME: UGLY replication
 ppr (OutNode id portid) =        
   text "<node" <+> text ("id=\"" ++ id ++ "\"") <> text ">" $+$
   nest nestVal (port portid $+$
                 process_type "OutPort") $+$
   text "</node>" 


instance Ppr GraphMLEdge where
 ppr (GraphMLEdge origN origP destN destP) = 
  text "<edge" <+> text ("source=\"" ++ origN ++ "\"") <+> 
                   text ("sourceport=\"" ++ origP ++ "\"") <+>
                   text ("target=\"" ++ destN ++ "\"") <+> 
                   text ("targetport=\"" ++ destP ++ "\"") <+> text "/>"



--FIMXE: the name of this funcion in not intuitive, it ptins the graphml tag as well

-- | pretty print a Graph with XML headers and key definitions
pprGraphWithHeaders :: GraphMLGraph -> Doc
pprGraphWithHeaders graph = 
 text "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" $+$
 text "<!-- Automatically generated by ForSyDe -->" $+$
 text "<graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\"" <+>  
 text "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" <+>
 text "xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns" <+> 
 text "http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\">" $+$ 
 nest nestVal (
    text "<key id=\"process_type\" attrb.name=\"process_type\" attrb.type=\"string\"/>" $+$
    text "<key id=\"value_arg\" attrb.name=\"value_arg\" attrb.type=\"string\"/>" $+$
    text "<key id=\"profun_arg\" attrb.name=\"procfun_arg\" attrb.type=\"string\"/>" $+$
    text "<key id=\"instance_parent\" attrb.name=\"instance_parent\" attrb.type=\"string\"/>" $+$
    ppr graph) $+$
 text "</graphml>"


-------------------------
-- Tag printing functions
-------------------------

port :: GraphMLPortId -> Doc
port id = text "<port" <+> text ("name=\"" ++ id ++ "\"") <> text "/>"   


process_type :: String -> Doc
process_type str = 
 text "<data key=\"process_type\">" <+> text str <+> text "</data>"   


value_arg :: Exp -> Doc
value_arg exp = 
 text "<data key=\"value_arg\">" <+> text (pprint exp)  <+> text "</data>"   

procfun_arg :: ProcFunAST -> Doc
-- FIXME: support default parameters
procfun_arg (ProcFunAST n cls _) = 
 text "<data key=\"value_arg\">" $+$
  nest nestVal (text $ pprint (FunD n cls)) $+$
 text "</data>"   


instance_parent :: SysId -> Doc
instance_parent  id = 
 text "<data key=\"instance_parent\">" <+> text id <+> text "</data>"   


